namespace TrackTv.Data
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using LinqToDB.Mapping;

    {{#each model.tables}}
    /// <summary>
    /// <para>Database table '{{TABLE_NAME}}'.</para>
    /// <para>This class is automatically generated.</para>
    /// </summary>
    [Table(Name = "{{TABLE_NAME}}")]
    public class {{CLASS_NAME}}Poco : IPoco
    {
        {{#each columns}}
        {{#if COLUMN_COMMENT}}
        /// <summary>
        {{#each comments}}/// <para>{{this}}</para>{{/each}}
        /// </summary>
        {{/if}}
        {{#if IsPrimaryKey}}[PrimaryKey, Identity]{{/if}}{{#unless IsPrimaryKey}}[Column(Name = "{{COLUMN_NAME}}")]{{#if IsNullable}}[Nullable]{{/if}}{{#unless IsNullable}}[NotNull]{{/unless}}{{/unless}} 
        public {{CLR_TYPE}} {{COLUMN_NAME}} { get; set; }
		{{#if IsPrimaryKey}}

		{{CLR_TYPE}} IPoco.GetPrimaryKey()
		{
			return this.{{COLUMN_NAME}};
		}

		void IPoco.SetPrimaryKey({{CLR_TYPE}} value)
		{
			this.{{COLUMN_NAME}} = value;
		}

		bool IPoco.IsNew()
		{
			return this.{{COLUMN_NAME}} == default;
		}
		{{/if}}
        
        {{/each}}
    }
    
    {{/each}}
    public partial class DbService
    {
		private readonly IReadOnlyDictionary<Type, string> primaryKeyMap = new Dictionary<Type, string>
		{
		{{#each model.tables}}
			{typeof({{CLASS_NAME}}Poco), "{{PRIMARY_KEY_COLUMN_NAME}}"},
        {{/each}}
		};

		private readonly IReadOnlyDictionary<Type, string> tableNameMap = new Dictionary<Type, string>
		{
		{{#each model.tables}}
			{typeof({{CLASS_NAME}}Poco), "{{TABLE_NAME}}"},
        {{/each}}
		};

        {{#each model.tables}}
		/// <summary>
		/// <para>Database table '{{TABLE_NAME}}'.</para>		
		/// </summary>
        public IQueryable<{{CLASS_NAME}}Poco> {{PLURAl_CLASS_NAME}} => this.DataConnection.GetTable<{{CLASS_NAME}}Poco>();
		
        {{/each}}
    }

	public partial interface IDbService
    {
        {{#each model.tables}}
		/// <summary>
		/// <para>Database table '{{TABLE_NAME}}'.</para>		
		/// </summary>
        IQueryable<{{CLASS_NAME}}Poco> {{PLURAl_CLASS_NAME}} { get; }

        {{/each}}
    }
}
