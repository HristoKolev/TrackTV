namespace TrackTv.Data
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
	using LinqToDB;
    using LinqToDB.Mapping;

	using NpgsqlTypes;
	using Npgsql;

    {{#each model.tables}}
    /// <summary>
    /// <para>Table name: '{{TableName}}'.</para>
	/// <para>Table schema: '{{TableSchema}}'.</para>
    /// </summary>
    [Table(Schema="{{TableSchema}}", Name = "{{TableName}}")]
    public class {{ClassName}}Poco : IPoco<{{ClassName}}Poco>
    {
        {{#each columns}}
        /// <summary>
		{{#if ColumnComment}}
        {{#each comments}}/// <para>{{this}}</para>{{/each}}
		{{/if}}
		/// <para>Column name: '{{ColumnName}}'.</para>
		/// <para>Table name: '{{TableName}}'.</para>
		{{#if IsPrimaryKey}}
		/// <para>Primary key of table: '{{TableName}}'.</para>
		/// <para>Primary key constraint name: '{{PrimaryKeyConstraintName}}'.</para>
		{{/if}}		
		{{#if IsForeignKey}}		
		/// <para>Foreign key column [{{TableSchema}}.{{TableName}}.{{ColumnName}} -> {{ForeignKeyReferenceSchemaName}}.{{ForeignKeyReferenceTableName}}.{{ForeignKeyReferenceColumnName}}].</para>
		/// <para>Foreign key constraint name: '{{ForeignKeyConstraintName}}'.</para>
		{{/if}}
		/// <para>This column {{#if IsNullable}}is nullable{{/if}}{{#unless IsNullable}}is not nullable{{/unless}}.</para>
		/// <para>PostgreSQL data type: '{{DbDataType}}'.</para>
		/// <para>NpgsqlDbType: 'NpgsqlDbType.{{NpgsDataTypeName}}'.</para>
		/// <para>CLR type: '{{ClrTypeName}}'.</para>
		/// <para>linq2db data type: '{{Linq2dbDataTypeName}}'.</para>
        /// </summary>
        {{#if IsPrimaryKey}}
		[PrimaryKey, Identity]
		{{/if}}
		{{#unless IsPrimaryKey}}
		{{#if IsNullable}}[Nullable]{{/if}}{{#unless IsNullable}}[NotNull]{{/unless}}
		{{/unless}}
		[Column(Name = "{{ColumnName}}", DataType = {{Linq2dbDataTypeName}})]
        public {{ClrTypeName}} {{PropertyName}} { get; set; }

        {{/each}}
		TableMetadataModel<{{ClassName}}Poco> IPoco<{{ClassName}}Poco>.Metadata => DbService.{{ClassName}}PocoMetadata;
    }
    
    {{/each}}
    public partial class DbService
    {
		{{#each model.tables}}
        internal static readonly TableMetadataModel<{{ClassName}}Poco> {{ClassName}}PocoMetadata = new TableMetadataModel<{{ClassName}}Poco>
		{
			ClassName = "{{ClassName}}",
			PluralClassName = "{{PluralClassName}}",
			PrimaryKeyColumnName = "{{PrimaryKeyColumnName}}",
			PrimaryKeyPropertyName = "{{PrimaryKeyPropertyName}}",
			TableName = "{{TableName}}",
			TableSchema = "{{TableSchema}}",
			GetPrimaryKey = (instance) => instance.{{PrimaryKeyPropertyName}},
			SetPrimaryKey = (instance, val) => instance.{{PrimaryKeyPropertyName}} = val,
			IsNew = (instance) => instance.{{PrimaryKeyPropertyName}} == default,
			Clone = (instance) => new {{ClassName}}Poco
			{
				{{#each columns}}
				{{PropertyName}} = instance.{{PropertyName}},
				{{/each}}
			},
			Setters = new Dictionary<string, Action<{{ClassName}}Poco, object>>
			{
				{{#each columns}}
				{"{{ColumnName}}", (instance, val) => instance.{{PropertyName}} = ({{ClrTypeName}})val },
				{{/each}}
			},
			Getters = new Dictionary<string, Func<{{ClassName}}Poco, object>>
			{
				{{#each columns}}
				{"{{ColumnName}}", (instance) => instance.{{PropertyName}} },
				{{/each}}
			},
			GenerateParameters = (instance, index) => 
			{
				return new NpgsqlParameter[] 
				{
					{{#each columns}}
					{{#unless IsPrimaryKey}}
					new NpgsqlParameter<{{ClrTypeName}}>("@p" + index++, NpgsqlDbType.{{NpgsDataTypeName}}) { TypedValue = instance.{{PropertyName}} },
					{{/unless}}
					{{/each}}
				};
			},
			GetColumnChanges = (dbInstance, myInstance) =>
			{
				var changedColumnNames = new List<string>();
				var changedColumnParameters = new List<NpgsqlParameter>();

				{{#each columns}}
				{{#unless IsPrimaryKey}}
				if(dbInstance.{{PropertyName}} != myInstance.{{PropertyName}})
				{
					changedColumnNames.Add("{{ColumnName}}");
					changedColumnParameters.Add(new NpgsqlParameter<{{ClrTypeName}}>(null, NpgsqlDbType.{{NpgsDataTypeName}}) { TypedValue = myInstance.{{PropertyName}} });
				}

				{{/unless}}
				{{/each}}
				return (changedColumnNames, changedColumnParameters);
			},
			Columns = new List<ColumnMetadataModel<{{ClassName}}Poco>>
			{
				{{#each columns}}
				new ColumnMetadataModel<{{../ClassName}}Poco>
				{						
					ClrTypeName = "{{ClrTypeName}}",
					ClrType = typeof({{ClrTypeName}}),
					ColumnComment = "{{ColumnComment}}" == string.Empty ? null : "{{ColumnComment}}",
					Comments = "{{ColumnComment}}".Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries),
					ColumnName = "{{ColumnName}}",
					DbDataType = "{{DbDataType}}",
					IsPrimaryKey = bool.Parse("{{IsPrimaryKey}}"),						
					PrimaryKeyConstraintName = "{{PrimaryKeyConstraintName}}" == string.Empty ? null : "{{PrimaryKeyConstraintName}}",
					IsForeignKey = bool.Parse("{{IsForeignKey}}"),
					ForeignKeyConstraintName = "{{ForeignKeyConstraintName}}" == string.Empty ? null : "{{ForeignKeyConstraintName}}",						
					ForeignKeyReferenceColumnName = "{{ForeignKeyReferenceColumnName}}" == string.Empty ? null : "{{ForeignKeyReferenceColumnName}}",
					ForeignKeyReferenceSchemaName = "{{ForeignKeyReferenceSchemaName}}" == string.Empty ? null : "{{ForeignKeyReferenceSchemaName}}",
					ForeignKeyReferenceTableName = "{{ForeignKeyReferenceTableName}}" == string.Empty ? null : "{{ForeignKeyReferenceTableName}}",												
					IsNullable = bool.Parse("{{IsNullable}}"),
					Linq2dbDataTypeName = "{{Linq2dbDataTypeName}}",
					Linq2dbDataType = {{Linq2dbDataTypeName}},
					NpgsDataTypeName = "NpgsqlDbType.{{NpgsDataTypeName}}",
					NpgsDataType = NpgsqlDbType.{{NpgsDataTypeName}},
					PropertyName = "{{PropertyName}}",
					TableName = "{{TableName}}",
					TableSchema = "{{TableSchema}}",
					SetValue = (instance, val) => instance.{{PropertyName}} = ({{ClrTypeName}})val,
					GetValue = (instance) => instance.{{PropertyName}},
				},
				{{/each}}
			}
		};
		
        {{/each}}
		static DbService()
		{
			{{#each model.tables}}
			{{ClassName}}PocoMetadata.ColumnsByName = new Dictionary<string, ColumnMetadataModel<{{ClassName}}Poco>>();

            foreach (var column in {{ClassName}}PocoMetadata.Columns)
            {
                {{ClassName}}PocoMetadata.ColumnsByName[column.ColumnName] = column;
            }

			{{/each}}
		}

		private static readonly IReadOnlyDictionary<Type, object> MetadataByPocoType = new Dictionary<Type, object>
        {
			{{#each model.tables}}
            {typeof({{ClassName}}Poco), {{ClassName}}PocoMetadata},
			{{/each}}
        };		

		public static TableMetadataModel<T> GetMetadata<T>()
            where T : IPoco<T>
        {
			return (TableMetadataModel<T>)MetadataByPocoType[typeof(T)];
        }

        {{#each model.tables}}
		/// <summary>
		/// <para>Database table '{{TableName}}'.</para>		
		/// </summary>
        public IQueryable<{{ClassName}}Poco> {{PluralClassName}} => this.DataConnection.GetTable<{{ClassName}}Poco>();
		
        {{/each}}
    }

	public partial interface IDbService
    {
        {{#each model.tables}}
		/// <summary>
		/// <para>Database table '{{TableName}}'.</para>
		/// <para>Table schema: '{{TableSchema}}'.</para>
		/// </summary>
        IQueryable<{{ClassName}}Poco> {{PluralClassName}} { get; }

        {{/each}}
    }
}
