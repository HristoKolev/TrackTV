namespace TrackTv.Data
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
	using LinqToDB;
    using LinqToDB.Mapping;

    {{#each model.tables}}
    /// <summary>
    /// <para>Table name: '{{TableName}}'.</para>
	/// <para>Table schema: '{{TableSchema}}'.</para>
    /// </summary>
    [Table(Schema="{{TableSchema}}", Name = "{{TableName}}")]
    public class {{ClassName}}Poco : IPoco
    {
        {{#each columns}}        
        /// <summary>
		{{#if ColumnComment}}
        {{#each comments}}/// <para>{{this}}</para>{{/each}}
		{{/if}}
		/// <para>Column name: '{{ColumnName}}'.</para>
		/// <para>Table name: '{{TableName}}'.</para>
		{{#if IsPrimaryKey}}
		/// <para>Primary key of table: '{{TableName}}'.</para>
		{{/if}}		
		{{#if ForeignKey}}		
		/// <para>Foreign key column [{{TableSchema}}.{{TableName}}.{{ColumnName}} -> {{ForeignKeyReferenceSchemaName}}.{{ForeignKeyReferenceTableName}}.{{ForeignKeyReferenceColumnName}}].</para>
		{{/if}}
		/// <para>This column {{#if IsNullable}}is nullable{{/if}}{{#unless IsNullable}}is not nullable{{/unless}}.</para>
		/// <para>PostgreSQL data type: '{{DataType}}'.</para>
		/// <para>CLR type: '{{ClrType}}'.</para>
		/// <para>linq2db data type: '{{Linq2dbDataType}}'.</para>
        /// </summary>        
        {{#if IsPrimaryKey}}
		[PrimaryKey, Identity]
		{{/if}}
		{{#unless IsPrimaryKey}}
		{{#if IsNullable}}[Nullable]{{/if}}{{#unless IsNullable}}[NotNull]{{/unless}}
		{{/unless}}
		[Column(Name = "{{ColumnName}}", DataType = {{Linq2dbDataType}})]
        public {{ClrType}} {{PropertyName}} { get; set; }
		{{#if IsPrimaryKey}}

		/// <summary>		
		/// <para>Returns the primary key for the table ({{PropertyName}}).</para>
        /// </summary>   
		{{ClrType}} IPoco.GetPrimaryKey() => this.{{PropertyName}};

		/// <summary>		
		/// <para>Sets the primary key for the table ({{PropertyName}}).</para>
        /// </summary> 
		void IPoco.SetPrimaryKey({{ClrType}} value) => this.{{PropertyName}} = value;

		/// <summary>		
		/// <para>Returns true if the record hasn't been inserted to the database yet.</para>
        /// </summary> 
		bool IPoco.IsNew() => this.{{PropertyName}} == default;
		{{/if}}
        
        {{/each}}
    }
    
    {{/each}}
    public partial class DbService
    {
		private static readonly IReadOnlyDictionary<Type, string> PrimaryKeyMap = new Dictionary<Type, string>
		{
		{{#each model.tables}}
			{typeof({{ClassName}}Poco), "{{PrimaryKeyColumnName}}"},
        {{/each}}
		};

		private static readonly IReadOnlyDictionary<Type, string> TableNameMap = new Dictionary<Type, string>
		{
		{{#each model.tables}}
			{typeof({{ClassName}}Poco), "{{TableName}}"},
        {{/each}}
		};

		private static readonly IReadOnlyDictionary<Type, string> TableSchemaMap = new Dictionary<Type, string>
		{
		{{#each model.tables}}
			{typeof({{ClassName}}Poco), "{{TableSchema}}"},
        {{/each}}
		};

        {{#each model.tables}}
		/// <summary>
		/// <para>Database table '{{TableName}}'.</para>		
		/// </summary>
        public IQueryable<{{ClassName}}Poco> {{PluralClassName}} => this.DataConnection.GetTable<{{ClassName}}Poco>();
		
        {{/each}}
    }

	public partial interface IDbService
    {
        {{#each model.tables}}
		/// <summary>
		/// <para>Database table '{{TableName}}'.</para>
		/// <para>Table schema: '{{TableSchema}}'.</para>
		/// </summary>
        IQueryable<{{ClassName}}Poco> {{PluralClassName}} { get; }

        {{/each}}
    }
}
