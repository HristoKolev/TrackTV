namespace {{model.Namespace}}
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Linq;
	using LinqToDB;
    using LinqToDB.Mapping;

	using NpgsqlTypes;
	using Npgsql;

    {{#each model.tables}}
    /// <summary>
    /// <para>Table name: '{{TableName}}'.</para>
	/// <para>Table schema: '{{TableSchema}}'.</para>
    /// </summary>
    [Table(Schema="{{TableSchema}}", Name = "{{TableName}}")]
    public class {{ClassName}}Poco : IPoco<{{ClassName}}Poco>
    {
        {{#each columns}}
        /// <summary>
		{{#if ColumnComment}}
        {{#each comments}}/// <para>{{this}}</para>{{/each}}
		{{/if}}
		/// <para>Column name: '{{ColumnName}}'.</para>
		/// <para>Table name: '{{TableName}}'.</para>
		{{#if IsPrimaryKey}}
		/// <para>Primary key of table: '{{TableName}}'.</para>
		/// <para>Primary key constraint name: '{{PrimaryKeyConstraintName}}'.</para>
		{{/if}}		
		{{#if IsForeignKey}}
		/// <para>Foreign key column [{{TableSchema}}.{{TableName}}.{{ColumnName}} -> {{ForeignKeyReferenceSchemaName}}.{{ForeignKeyReferenceTableName}}.{{ForeignKeyReferenceColumnName}}].</para>
		/// <para>Foreign key constraint name: '{{ForeignKeyConstraintName}}'.</para>
		{{/if}}
		/// <para>This column {{#if IsNullable}}is nullable{{/if}}{{#unless IsNullable}}is not nullable{{/unless}}.</para>
		/// <para>PostgreSQL data type: '{{DbDataType}}'.</para>
		/// <para>NpgsqlDbType: 'NpgsqlDbType.{{NpgsDataTypeName}}'.</para>
		/// <para>CLR type: '{{ClrTypeName}}'.</para>
		/// <para>linq2db data type: '{{Linq2dbDataTypeName}}'.</para>
        /// </summary>
        {{#if IsPrimaryKey}}
		[PrimaryKey, Identity]
		{{/if}}
		{{#unless IsPrimaryKey}}
		{{#if IsNullable}}[Nullable]{{/if}}{{#unless IsNullable}}[NotNull]{{/unless}}
		{{/unless}}
		[Column(Name = "{{ColumnName}}", DataType = {{Linq2dbDataTypeName}})]
        public {{ClrTypeName}} {{PropertyName}} { get; set; }

        {{/each}}
		TableMetadataModel<{{ClassName}}Poco> IPoco<{{ClassName}}Poco>.Metadata => {{../model.PocoClassName}}.{{ClassName}}PocoMetadata;

		public {{ClassName}}BM ToBm()
		{
			return new {{ClassName}}BM
			{
				{{#each columns}}
				{{PropertyName}} = this.{{PropertyName}},
				{{/each}}
			};
		}
    }

	{{/each}}

	{{#each model.tables}}
    /// <summary>
    /// <para>Table name: '{{TableName}}'.</para>
	/// <para>Table schema: '{{TableSchema}}'.</para>
    /// </summary>
    public class {{ClassName}}CM : ICatalogModel<{{ClassName}}Poco>
    {
        {{#each columns}}
		/// <summary>
		{{#if ColumnComment}}
        {{#each comments}}/// <para>{{this}}</para>{{/each}}
		{{/if}}
		/// <para>Column name: '{{ColumnName}}'.</para>
		/// <para>Table name: '{{TableName}}'.</para>
		{{#if IsPrimaryKey}}
		/// <para>Primary key of table: '{{TableName}}'.</para>
		/// <para>Primary key constraint name: '{{PrimaryKeyConstraintName}}'.</para>
		{{/if}}		
		{{#if IsForeignKey}}
		/// <para>Foreign key column [{{TableSchema}}.{{TableName}}.{{ColumnName}} -> {{ForeignKeyReferenceSchemaName}}.{{ForeignKeyReferenceTableName}}.{{ForeignKeyReferenceColumnName}}].</para>
		/// <para>Foreign key constraint name: '{{ForeignKeyConstraintName}}'.</para>
		{{/if}}
		/// <para>This column {{#if IsNullable}}is nullable{{/if}}{{#unless IsNullable}}is not nullable{{/unless}}.</para>
		/// <para>PostgreSQL data type: '{{DbDataType}}'.</para>
		/// <para>NpgsqlDbType: 'NpgsqlDbType.{{NpgsDataTypeName}}'.</para>
		/// <para>CLR type: '{{ClrTypeName}}'.</para>
		/// <para>linq2db data type: '{{Linq2dbDataTypeName}}'.</para>
        /// </summary>
        public {{ClrTypeName}} {{PropertyName}} { get; set; }

        {{/each}}
    }
    
    {{/each}}

	{{#each model.tables}}
    /// <summary>
    /// <para>Table name: '{{TableName}}'.</para>
	/// <para>Table schema: '{{TableSchema}}'.</para>
    /// </summary>
    public class {{ClassName}}FM : IFilterModel<{{ClassName}}Poco>
    {
        {{#each columns}}
		{{#each ValidOperators}}
		[FilterOperator(QueryOperatorType.{{#if this}}{{this}}{{/if}}{{#unless this}}Equal{{/unless}}, "{{../PropertyName}}", NpgsqlDbType.{{../NpgsDataTypeName}})]
        public {{../ClrNullableTypeName}} {{../PropertyName}}{{#if this}}_{{/if}}{{this}} { get; set; }

		{{/each}}
		{{#if IsNullable}}
		[FilterOperator(QueryOperatorType.IsNull, "{{PropertyName}}", NpgsqlDbType.{{NpgsDataTypeName}})]
		public bool? {{PropertyName}}_IsNull { get; set; }

		[FilterOperator(QueryOperatorType.IsNotNull, "{{PropertyName}}", NpgsqlDbType.{{NpgsDataTypeName}})]
		public bool? {{PropertyName}}_IsNotNull { get; set; }

		{{/if}}
		[FilterOperator(QueryOperatorType.IsIn, "{{PropertyName}}", NpgsqlDbType.{{NpgsDataTypeName}})]
		public {{ClrNonNullableTypeName}}[] {{PropertyName}}_IsIn { get; set; }

		[FilterOperator(QueryOperatorType.IsNotIn, "{{PropertyName}}", NpgsqlDbType.{{NpgsDataTypeName}})]
		public {{ClrNonNullableTypeName}}[] {{PropertyName}}_IsNotIn { get; set; }

        {{/each}}
    }
    
    {{/each}}

	{{#each model.tables}}
    /// <summary>
    /// <para>Table name: '{{TableName}}'.</para>
	/// <para>Table schema: '{{TableSchema}}'.</para>  
    /// </summary>
    public partial class {{ClassName}}BM : IBusinessModel<{{ClassName}}Poco>
    {
        {{#each columns}}
		/// <summary>
		{{#if ColumnComment}}
        {{#each comments}}/// <para>{{this}}</para>{{/each}}
		{{/if}}
		/// <para>Column name: '{{ColumnName}}'.</para>
		/// <para>Table name: '{{TableName}}'.</para>
		{{#if IsPrimaryKey}}
		/// <para>Primary key of table: '{{TableName}}'.</para>
		/// <para>Primary key constraint name: '{{PrimaryKeyConstraintName}}'.</para>
		{{/if}}		
		{{#if IsForeignKey}}
		/// <para>Foreign key column [{{TableSchema}}.{{TableName}}.{{ColumnName}} -> {{ForeignKeyReferenceSchemaName}}.{{ForeignKeyReferenceTableName}}.{{ForeignKeyReferenceColumnName}}].</para>
		/// <para>Foreign key constraint name: '{{ForeignKeyConstraintName}}'.</para>
		{{/if}}
		/// <para>This column {{#if IsNullable}}is nullable{{/if}}{{#unless IsNullable}}is not nullable{{/unless}}.</para>
		/// <para>PostgreSQL data type: '{{DbDataType}}'.</para>
		/// <para>NpgsqlDbType: 'NpgsqlDbType.{{NpgsDataTypeName}}'.</para>
		/// <para>CLR type: '{{ClrTypeName}}'.</para>
		/// <para>linq2db data type: '{{Linq2dbDataTypeName}}'.</para>
        /// </summary>
        public {{ClrTypeName}} {{PropertyName}} { get; set; }

		{{/each}}
		public {{ClassName}}Poco ToPoco()
		{
			return new {{ClassName}}Poco
			{
				{{#each columns}}
				{{PropertyName}} = this.{{PropertyName}},
				{{/each}}
			};
		}
	}
    
    {{/each}}
    public class {{model.PocoClassName}} : IDbPocos<{{model.PocoClassName}}>
    {
		private static IReadOnlyDictionary<string, IReadOnlyDictionary<string, string>> TableToPropertyMap;

		{{#each model.tables}}
        internal static TableMetadataModel<{{ClassName}}Poco> {{ClassName}}PocoMetadata;
		
        {{/each}}
		private static IReadOnlyDictionary<Type, object> StaticMetadataByPocoType;

		private static volatile object InitLock = new object();

		private static bool Initialized;

        // ReSharper disable once FunctionComplexityOverflow
        // ReSharper disable once CyclomaticComplexity
		private static void InitializeInternal()
		{
			TableToPropertyMap = new Dictionary<string, IReadOnlyDictionary<string, string>>
			{
				{{#each model.tables}}
				{"{{TableName}}", new Dictionary<string, string>
				{
					{{#each columns}}
					{"{{ColumnName}}", "{{PropertyName}}"},
					{{/each}}
				}},
				{{/each}}
			};

			{{#each model.tables}}
			{{ClassName}}PocoMetadata = new TableMetadataModel<{{ClassName}}Poco>
			{
				ClassName = "{{ClassName}}",
				PluralClassName = "{{PluralClassName}}",
				PrimaryKeyColumnName = "{{PrimaryKeyColumnName}}",
				PrimaryKeyPropertyName = "{{PrimaryKeyPropertyName}}",
				TableName = "{{TableName}}",
				TableSchema = "{{TableSchema}}",
				GetPrimaryKey = (instance) => instance.{{PrimaryKeyPropertyName}},
				SetPrimaryKey = (instance, val) => instance.{{PrimaryKeyPropertyName}} = val,
				IsNew = (instance) => instance.{{PrimaryKeyPropertyName}} == default,
				Clone = DbServiceHelpers.GetClone<{{ClassName}}Poco>(),
				MapToCM = DbServiceHelpers.GetMapToCM<{{ClassName}}Poco, {{ClassName}}CM>(),
				Setters = DbServiceHelpers.GetSetters<{{ClassName}}Poco>(TableToPropertyMap["{{TableName}}"]),
				Getters = DbServiceHelpers.GetGetters<{{ClassName}}Poco>(TableToPropertyMap["{{TableName}}"]),
				Columns = new List<ColumnMetadataModel>
				{
					{{#each columns}}
					new ColumnMetadataModel
					{
						ClrTypeName = "{{ClrTypeName}}",
						ClrType = typeof({{ClrTypeName}}),
						ClrNonNullableTypeName = "{{ClrNonNullableTypeName}}",
						ClrNonNullableType = typeof({{ClrNonNullableTypeName}}),
						ClrNullableTypeName = "{{ClrNullableTypeName}}",
						ClrNullableType = typeof({{ClrNullableTypeName}}),
						ColumnComment = "{{ColumnComment}}" == string.Empty ? null : "{{ColumnComment}}",
						Comments = "{{ColumnComment}}".Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries),
						ColumnName = "{{ColumnName}}",
						DbDataType = "{{DbDataType}}",
						IsPrimaryKey = bool.Parse("{{IsPrimaryKey}}"),						
						PrimaryKeyConstraintName = "{{PrimaryKeyConstraintName}}" == string.Empty ? null : "{{PrimaryKeyConstraintName}}",
						IsForeignKey = bool.Parse("{{IsForeignKey}}"),
						ForeignKeyConstraintName = "{{ForeignKeyConstraintName}}" == string.Empty ? null : "{{ForeignKeyConstraintName}}",						
						ForeignKeyReferenceColumnName = "{{ForeignKeyReferenceColumnName}}" == string.Empty ? null : "{{ForeignKeyReferenceColumnName}}",
						ForeignKeyReferenceSchemaName = "{{ForeignKeyReferenceSchemaName}}" == string.Empty ? null : "{{ForeignKeyReferenceSchemaName}}",
						ForeignKeyReferenceTableName = "{{ForeignKeyReferenceTableName}}" == string.Empty ? null : "{{ForeignKeyReferenceTableName}}",												
						IsNullable = bool.Parse("{{IsNullable}}"),
						IsClrValueType = bool.Parse("{{IsClrValueType}}"),
						IsClrNullableType = bool.Parse("{{IsClrNullableType}}"),
						IsClrReferenceType = bool.Parse("{{IsClrReferenceType}}"),
						Linq2dbDataTypeName = "{{Linq2dbDataTypeName}}",
						Linq2dbDataType = {{Linq2dbDataTypeName}},
						NpgsDataTypeName = "NpgsqlDbType.{{NpgsDataTypeName}}",
						NpgsDataType = NpgsqlDbType.{{NpgsDataTypeName}},
						PropertyName = "{{PropertyName}}",
						TableName = "{{TableName}}",
						TableSchema = "{{TableSchema}}",
					},
					{{/each}}
				}
			};
			
			{{/each}}
			{{#each model.tables}}
			{{ClassName}}PocoMetadata.GenerateParameters = DbServiceHelpers.GetGenerateParameters({{ClassName}}PocoMetadata);

			{{ClassName}}PocoMetadata.GetColumnChanges = (dbInstance, myInstance) =>
			{
				var changedColumnNames = new List<string>();
				var changedColumnParameters = new List<NpgsqlParameter>();

				{{#each columns}}
				{{#unless IsPrimaryKey}}
				if(dbInstance.{{PropertyName}} != myInstance.{{PropertyName}})
				{
					changedColumnNames.Add("{{ColumnName}}");
					changedColumnParameters.Add(new NpgsqlParameter(null, NpgsqlDbType.{{NpgsDataTypeName}}) { Value = myInstance.{{PropertyName}}{{#if IsClrReferenceType}} ?? (object)DBNull.Value{{/if}} });
				}

				{{/unless}}
				{{/each}}
				return (changedColumnNames, changedColumnParameters);
			};		

			{{ClassName}}PocoMetadata.GetAllColumns = DbServiceHelpers.GetGetAllColumns({{ClassName}}PocoMetadata);

			{{ClassName}}PocoMetadata.ParseFM = (instance) => {
				var columnNames = new List<string>();
				var columnParameters = new List<NpgsqlParameter>();
				var operators = new List<QueryOperatorType>();

				var fm = instance as {{ClassName}}FM;

				{{#each columns}}
				{{#each ValidOperators}}
				if(fm.{{../PropertyName}}{{#if this}}_{{/if}}{{this}} != null)
				{
					columnNames.Add("{{../ColumnName}}");
					columnParameters.Add(new NpgsqlParameter(null, NpgsqlDbType.{{../NpgsDataTypeName}}) { Value = fm.{{../PropertyName}}{{#if this}}_{{/if}}{{this}}{{#if IsClrReferenceType}} ?? (object)DBNull.Value{{/if}} });
					operators.Add(QueryOperatorType.{{#if this}}{{this}}{{/if}}{{#unless this}}Equal{{/unless}});
				}		 

				{{/each}}
				{{#if IsNullable}}
				if(fm.{{PropertyName}}_IsNull != null)
				{
					columnNames.Add("{{ColumnName}}");
					columnParameters.Add(null);
					operators.Add(QueryOperatorType.IsNull);
				}

				if(fm.{{PropertyName}}_IsNotNull != null)
				{
					columnNames.Add("{{ColumnName}}");
					columnParameters.Add(null);
					operators.Add(QueryOperatorType.IsNotNull);
				}

				{{/if}}
				if(fm.{{PropertyName}}_IsIn != null)
				{
					columnNames.Add("{{ColumnName}}");
					columnParameters.Add(new NpgsqlParameter(null, NpgsqlDbType.Array | NpgsqlDbType.{{NpgsDataTypeName}}) { Value = fm.{{PropertyName}}_IsIn });
					operators.Add(QueryOperatorType.IsIn);
				}

				if(fm.{{PropertyName}}_IsNotIn != null)
				{
					columnNames.Add("{{ColumnName}}");
					columnParameters.Add(new NpgsqlParameter(null, NpgsqlDbType.Array | NpgsqlDbType.{{NpgsDataTypeName}}) { Value = fm.{{PropertyName}}_IsNotIn });
					operators.Add(QueryOperatorType.IsNotIn);
				}

				{{/each}}

				return (columnNames, columnParameters, operators);
			};			
			
			{{/each}}
			StaticMetadataByPocoType = new Dictionary<Type, object>
			{
				{{#each model.tables}}
				{typeof({{ClassName}}Poco), {{ClassName}}PocoMetadata},
				{{/each}}
			};		
		}

		public static void Initialize()
		{
			if(Initialized)
			{
				return;
			}

			lock(InitLock)
			{
				if(Initialized)
				{
					return;
				}			

				InitializeInternal();	

				Initialized = true;
			}
		}

		static {{model.PocoClassName}}()
		{
			Initialize();
		}

        {{#each model.tables}}
		/// <summary>
		/// <para>Database table '{{TableName}}'.</para>		
		/// </summary>
        public IQueryable<{{ClassName}}Poco> {{PluralClassName}} => this.DbService.GetTable<{{ClassName}}Poco>();

		/// <summary>
		/// <para>Database table '{{TableName}}'.</para>
		/// <para>Filter model '{{ClassName}}FM'.</para>
		/// <para>Catalog model '{{ClassName}}CM'.</para>
		/// </summary>
		public Task<List<{{ClassName}}CM>> Filter({{ClassName}}FM filter) => this.DbService.FilterInternal<{{ClassName}}Poco, {{ClassName}}CM>(filter);
		
        {{/each}}
		public IReadOnlyDictionary<Type, object> MetadataByPocoType => StaticMetadataByPocoType;

		public IDbService<{{model.PocoClassName}}> DbService { private get; set; }
    }
}
