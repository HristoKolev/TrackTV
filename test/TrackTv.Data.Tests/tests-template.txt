namespace {{model.Namespace}}
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Reflection;
	using System.Threading.Tasks;	

	using LinqToDB;

	using Npgsql;

	using TrackTv.Data.Tests.Infrastructure;

	using Xunit;

	{{#each model.tables}}
	public class {{ClassName}}Test : DatabaseTest
	{
		{{#unless IsView}}
		[Theory]
		[ClassData(typeof(GeneratedData<{{ClassName}}Poco>))]
		public async Task Crud({{ClassName}}Poco poco)
		{
			int id = await this.Db.Insert(poco);

			var readFromDb = await this.Db.FindByID<{{ClassName}}Poco>(id);

			{{#each columns}}
			Assert.Equal(poco.{{PropertyName}}, readFromDb.{{PropertyName}});
			{{/each}}

			int updatedId = await this.Db.Update(poco);

			Assert.Equal(id, updatedId);

			await this.Db.Delete(poco);
		}

		[Theory]
		[ClassData(typeof(GeneratedData<{{ClassName}}Poco>))]
		public async Task CrudNonPocoRead({{ClassName}}Poco poco)
		{
			int id = await this.Db.Insert(poco);

			var readFromDb = await this.Db.QueryOne<{{ClassName}}BM>("select * from {{TableName}} where {{PrimaryKeyColumnName}} = @pk;", new NpgsqlParameter("pk", id));

			{{#each columns}}
			Assert.Equal(poco.{{PropertyName}}, readFromDb.{{PropertyName}});
			{{/each}}

			int updatedId = await this.Db.Update(poco);

			Assert.Equal(id, updatedId);

			await this.Db.Delete(poco);
		}

		[Theory]
		[ClassData(typeof(GeneratedData<{{ClassName}}Poco>))]
		public async Task SelectCm({{ClassName}}Poco poco)
		{
			await this.Db.Insert(poco);

			var pocoFromDb = await this.Db.Poco.{{ClassName}}.FirstAsync();
			var cmFromDb = await this.Db.Poco.{{ClassName}}.SelectCm<{{ClassName}}Poco, {{ClassName}}CM>().FirstAsync();

			{{#each columns}}
			Assert.Equal(pocoFromDb.{{PropertyName}}, cmFromDb.{{PropertyName}});
			{{/each}}
		}

		[Theory]
		[ClassData(typeof(GeneratedBulkData<{{ClassName}}Poco>))]
		public async Task BulkInsert(List<{{ClassName}}Poco> poco)
		{
			await this.Db.BulkInsert(poco);
		}

		[Fact]
		public async Task OrderByPrimaryKey()
		{
			await this.Db.GetTable<{{ClassName}}Poco>().OrderByPrimaryKey().ToArrayAsync();
		}

		[Fact]
		public async Task OrderByPrimaryKeyDescending()
		{
			await this.Db.GetTable<{{ClassName}}Poco>().OrderByPrimaryKeyDescending().ToArrayAsync();
		}

		[Theory]
		[ClassData(typeof(GeneratedBulkData<{{ClassName}}Poco>))]
		public void GetColumnChanges(List<{{ClassName}}Poco> pocos)
		{
			var getColumnChanges = {{../model.MetadataClassName}}.{{ClassName}}PocoMetadata.GetColumnChanges;

			var columns = {{../model.MetadataClassName}}.{{ClassName}}PocoMetadata.Columns.Where(x => !x.IsPrimaryKey).ToArray();
			var getters = DbCodeGenerator.GenerateGetters<{{ClassName}}Poco>();

			var allColumnNames = new HashSet<string>(columns.Select(x => x.ColumnName));

			foreach (var (instance1, instance2) in pocos.Zip(Enumerable.Reverse(pocos), (x, y) => (x, y)))
			{
				var (columnNames, parameters) = getColumnChanges(instance1, instance2);

				Assert.Equal(parameters.Count, columnNames.Count);
				Assert.True(columnNames.Count <= columns.Length);

				foreach (string columnName in columnNames)
				{
					Assert.Contains(columnName, allColumnNames);
				}

				foreach (var column in columns)
				{
					var getter = getters[column.ColumnName];

					var value1 = getter(instance1);
					var value2 = getter(instance2);

					if (this.StupidEquals(value1, value2))
					{
						Assert.DoesNotContain(column.ColumnName, columnNames);
					}
					else
					{
						Assert.Contains(column.ColumnName, columnNames);
						int index = columnNames.IndexOf(column.ColumnName);
						var parameter = parameters[index];

						Assert.Equal(column.NpgsDataType, parameter.NpgsqlDbType);

						Assert.Equal(value2 ?? DBNull.Value, parameter.Value);
					}
				}
			}
		}

		[Theory]
		[ClassData(typeof(GeneratedData<{{ClassName}}Poco>))]
		// ReSharper disable once CyclomaticComplexity
		public void GenerateParameters({{ClassName}}Poco poco)
		{
			var getParameters = {{../model.MetadataClassName}}.{{ClassName}}PocoMetadata.GenerateParameters;

			var parameters = getParameters(poco);

			var columns = {{../model.MetadataClassName}}.{{ClassName}}PocoMetadata.Columns.Where(x => !x.IsPrimaryKey).ToArray();
			var getters = DbCodeGenerator.GenerateGetters<{{ClassName}}Poco>();

			for (int i = 0; i < columns.Length; i++)
			{
				var column = columns[i];
				var getter = getters[column.ColumnName];

				var parameter = parameters[i];

				Assert.Equal(getter(poco) ?? DBNull.Value, parameter.Value);
			}
		}

		[Theory]
		[ClassData(typeof(GeneratedData<{{ClassName}}Poco>))]
		// ReSharper disable once CyclomaticComplexity
		public void GetAllColumns({{ClassName}}Poco poco)
		{
			var getAllColumns = {{../model.MetadataClassName}}.{{ClassName}}PocoMetadata.GetAllColumns;

			var (columnNames, parameters) = getAllColumns(poco);

			var columns = {{../model.MetadataClassName}}.{{ClassName}}PocoMetadata.Columns.Where(x => !x.IsPrimaryKey).ToArray();
			var getters = DbCodeGenerator.GenerateGetters<{{ClassName}}Poco>();

			for (int i = 0; i < columns.Length; i++)
			{
				var column = columns[i];
				var getter = getters[column.ColumnName];
				var parameter = parameters[i];

				Assert.Equal(columnNames[i], column.ColumnName);

				Assert.Equal(getter(poco) ?? DBNull.Value, parameter.Value);
			}
		}

		{{/unless}}
		[Theory]
		[ClassData(typeof(GeneratedFilterData<{{ClassName}}Poco, {{ClassName}}FM>))]
		public async Task FilterSql({{ClassName}}FM filter)
		{
			await this.Db.FilterInternal<{{ClassName}}Poco, {{ClassName}}CM>(filter);
		}

		[Fact]
		public async Task SelectCmDry()
		{
			await this.Db.Poco.{{ClassName}}.ToArrayAsync();
			await this.Db.Poco.{{ClassName}}.SelectCm<{{ClassName}}Poco, {{ClassName}}CM>().ToArrayAsync();
		}

		[Theory]
		[ClassData(typeof(GeneratedFilterData<{{ClassName}}Poco, {{ClassName}}FM>))]
		public async Task FilterQueryable({{ClassName}}FM filter)
		{
			await this.Db.GetTable<{{ClassName}}Poco>().Filter(filter).ToArrayAsync();
		}

		[Theory]
		[ClassData(typeof(GeneratedData<{{ClassName}}Poco>))]
		public void Getters({{ClassName}}Poco poco)
		{
			var getters = DbCodeGenerator.GenerateGetters<{{ClassName}}Poco>();

			{{#each columns}}
			Assert.Equal(poco.{{PropertyName}}, getters["{{ColumnName}}"](poco));
			{{/each}}
		}

		[Theory]
		[ClassData(typeof(GeneratedData<{{ClassName}}Poco>))]
		public void Setters({{ClassName}}Poco poco)
		{
			var setters = DbCodeGenerator.GenerateSetters<{{ClassName}}Poco>();

			var newObj = new {{ClassName}}Poco();

			{{#each columns}}
			setters["{{ColumnName}}"](newObj, poco.{{PropertyName}});
			Assert.Equal(poco.{{PropertyName}}, newObj.{{PropertyName}});

			{{/each}}
		}

		[Theory]
		[ClassData(typeof(GeneratedData<{{ClassName}}Poco>))]
		public void Clone({{ClassName}}Poco poco)
		{
			var clone = {{../model.MetadataClassName}}.{{ClassName}}PocoMetadata.Clone;

			var newObj = clone(poco);

			Assert.NotEqual(poco, newObj);

			{{#each columns}}
			Assert.Equal(poco.{{PropertyName}}, newObj.{{PropertyName}});
			{{/each}}
		}

		[Theory]
		[ClassData(typeof(GeneratedFilterData<{{ClassName}}Poco, {{ClassName}}FM>))]
		public void ParseFm({{ClassName}}FM filter)
		{
			var properties = typeof({{ClassName}}FM).GetProperties().Where(x => x.GetValue(filter) != null);
			var attributes = properties.Select(x => x.GetCustomAttribute<FilterOperatorAttribute>()).ToList();

			var expectedNames = attributes.Select(x => x.ColumnName).ToList();
			var expectedOperators = attributes.Select(x => x.QueryOperatorType).ToList();
			var expectedValues = properties.Select(x =>
				{
					var attr = x.GetCustomAttribute<FilterOperatorAttribute>();

					if (attr.QueryOperatorType    == QueryOperatorType.IsNull
						|| attr.QueryOperatorType == QueryOperatorType.IsNotNull)
					{
						return null;
					}

					return x.GetValue(filter);
				}).ToList();

			var (columnNames, columnParameters, operators) = {{../model.MetadataClassName}}.{{ClassName}}PocoMetadata.ParseFm(filter);

			Assert.Equal(expectedNames, columnNames);
			Assert.Equal(expectedOperators, operators);
			Assert.Equal(expectedValues, columnParameters.Select(x => x?.Value).ToList());
		}
	}

	{{/each}}
}