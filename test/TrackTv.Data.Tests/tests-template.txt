namespace {{model.Namespace}}
{
	using System;
    using System.Collections.Generic;
	using System.Linq;
    using System.Threading.Tasks;	

    using LinqToDB;

    using TrackTv.Data.Tests.Infrastructure;

    using Xunit;

	{{#each model.tables}}
    public class {{ClassName}}Test : DatabaseTest
    {
        [Theory]
        [ClassData(typeof(GeneratedData<{{ClassName}}Poco>))]
        public async Task Crud({{ClassName}}Poco poco)
        {
            int id = await this.Db.Insert(poco);

            var readFromDb = await this.Db.FindByID<{{ClassName}}Poco>(id);

            foreach (var getter in {{../model.PocoClassName}}.{{ClassName}}PocoMetadata.Getters.Values)
            {
                Assert.Equal(getter(poco), getter(readFromDb));
            }

            int updatedId = await this.Db.Update(poco);

            Assert.Equal(id, updatedId);

            await this.Db.Delete(poco);
        }

        [Theory]
        [ClassData(typeof(GeneratedBulkData<{{ClassName}}Poco>))]
        public async Task BulkInsert(List<{{ClassName}}Poco> poco)
        {
            await this.Db.BulkInsert(poco);
        }

		[Theory]
        [ClassData(typeof(GeneratedFilterData<{{ClassName}}Poco, {{ClassName}}FM>))]
        public async Task FilterSql({{ClassName}}FM filter)
        {
            await this.Db.FilterInternal<{{ClassName}}Poco, {{ClassName}}CM>(filter);
        }

		[Theory]
        [ClassData(typeof(GeneratedFilterData<{{ClassName}}Poco, {{ClassName}}FM>))]
        public async Task FilterQueryable({{ClassName}}FM filter)
        {
            await this.Db.GetTable<{{ClassName}}Poco>().Filter(filter).ToArrayAsync();
        }

		[Theory]
        [ClassData(typeof(GeneratedData<{{ClassName}}Poco>))]
        public void Getters({{ClassName}}Poco poco)
        {
            var getters = TestDbPocos.{{ClassName}}PocoMetadata.Getters;

			{{#each columns}}
			Assert.Equal(poco.{{PropertyName}}, getters["{{ColumnName}}"](poco));
			{{/each}}
        }

		[Theory]
        [ClassData(typeof(GeneratedData<{{ClassName}}Poco>))]
        public void Setters({{ClassName}}Poco poco)
        {
            var setters = TestDbPocos.{{ClassName}}PocoMetadata.Setters;

			var newObj = new {{ClassName}}Poco();

			{{#each columns}}
			setters["{{ColumnName}}"](newObj, poco.{{PropertyName}});	
			Assert.Equal(poco.{{PropertyName}}, newObj.{{PropertyName}});

			{{/each}}			
        }

		[Theory]
        [ClassData(typeof(GeneratedData<{{ClassName}}Poco>))]
        public void Clone({{ClassName}}Poco poco)
        {
            var clone = TestDbPocos.{{ClassName}}PocoMetadata.Clone;

			var newObj = clone(poco);

			Assert.NotEqual(poco, newObj);

			{{#each columns}}
			Assert.Equal(poco.{{PropertyName}}, newObj.{{PropertyName}});
			{{/each}}
        }

		[Theory]
        [ClassData(typeof(GeneratedData<{{ClassName}}Poco>))]
		// ReSharper disable once CyclomaticComplexity
        public void GenerateParameters({{ClassName}}Poco poco)
        {
            var getParameters = TestDbPocos.{{ClassName}}PocoMetadata.GenerateParameters;

			var parameters = getParameters(poco);

            var columns = TestDbPocos.{{ClassName}}PocoMetadata.Columns.Where(x => !x.IsPrimaryKey).ToArray();
            var getters = TestDbPocos.{{ClassName}}PocoMetadata.Getters;

            for (int i = 0; i < columns.Length; i++)
            {
                var column = columns[i];
                var getter = getters[column.ColumnName];

                var parameter = parameters[i];

                Assert.Equal(getter(poco), parameter.Value == DBNull.Value ? null : parameter.Value);
            }
        }		
    }

	{{/each}}
}